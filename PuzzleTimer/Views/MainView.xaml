<UserControl x:Class="PuzzleTimer.Views.MainView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:m="clr-namespace:PuzzleTimer.Models"
             xmlns:fa5="http://schemas.fontawesome.com/icons/"
             xmlns:local="clr-namespace:PuzzleTimer.Views"
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="1150" Style="{DynamicResource WindowStyle}">
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="SizeChanged">
            <b:InvokeCommandAction Command="{Binding SizeChangedCommand}" PassEventArgsToCommand="True"></b:InvokeCommandAction>
        </b:EventTrigger>
        <b:EventTrigger EventName="Closing">
            <b:InvokeCommandAction Command="{Binding ClosingCommand}"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="PreviewKeyUp">
            <b:InvokeCommandAction Command="{Binding KeyUpCommand}" PassEventArgsToCommand="True"></b:InvokeCommandAction>
        </b:EventTrigger>
        <b:EventTrigger EventName="PreviewKeyDown">
            <b:InvokeCommandAction Command="{Binding KeyDownCommand}" PassEventArgsToCommand="True"></b:InvokeCommandAction>
        </b:EventTrigger>
    </b:Interaction.Triggers>
    <Grid >
        <DockPanel LastChildFill="True">
            <Menu Height="20" DockPanel.Dock="Top" Style="{DynamicResource MenuStyle}">
                <MenuItem Header="{Binding EditText, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource menuParentStyle}" ItemContainerStyle="{DynamicResource MenuItemStyle1}" Template="{DynamicResource MenuItemControlTemplate2}">
                    <MenuItem Header="{Binding AddText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding AddItemCommand}"></MenuItem>
                    <MenuItem Header="{Binding UpdateText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding UpdateItemCommand}"></MenuItem>
                    <MenuItem Header="{Binding DeleteText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding DeleteItemCommand}"></MenuItem>
                    <MenuItem Header="{Binding ClearAllText, UpdateSourceTrigger=PropertyChanged}" IsEnabled="True" Command="{Binding ClearAllCommand}"></MenuItem>
                    <MenuItem Header="{Binding CopyToClipboardText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding CopyToClipboardCommand}"></MenuItem>
                </MenuItem>
                <MenuItem Header="{Binding ChartText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding ChartCommand}" Style="{DynamicResource menuParentStyle}" ItemContainerStyle="{DynamicResource MenuItemStyle1}" Template="{DynamicResource MenuItemControlTemplate2}"></MenuItem>
                <MenuItem Header="{Binding HelpText, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource menuParentStyle}" ItemContainerStyle="{DynamicResource MenuItemStyle1}" Template="{DynamicResource MenuItemControlTemplate2}">
                    <MenuItem Header="{Binding HelpText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding HelpCommand}"></MenuItem>
                    <MenuItem Header="{Binding AboutText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding AboutCommand}"></MenuItem>
                    <MenuItem Header="{Binding SettingsText, UpdateSourceTrigger=PropertyChanged}" Command="{Binding SettingsCommand}"></MenuItem>
                </MenuItem>
            </Menu>
            <StatusBar DockPanel.Dock="Bottom" Height="30" Style="{DynamicResource StatusBarStyle}" BorderThickness="0 1 0 0">
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock VerticalAlignment="Center" Text="{Binding SelectPuzzleText, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                        <ComboBox SelectedIndex="{Binding CurrentPuzzle, UpdateSourceTrigger=PropertyChanged}" 
                                  ItemsSource="{Binding PuzzleNameCollection}" Width="107" Margin="5 0 0 0" 
                                  m:FocusExtension.IsFocused="{Binding IsComboBoxFocused, UpdateSourceTrigger=PropertyChanged}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="SelectionChanged">
                                    <b:InvokeCommandAction Command="{Binding PuzzleTypeSelectionChangedCommand}" PassEventArgsToCommand="True"></b:InvokeCommandAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ComboBox>
                    </StackPanel>
                </StatusBarItem>
                <Separator Style="{DynamicResource SeparatorStyle}"/>
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Avg3LastText, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                        <TextBlock Text="{Binding Avg3Last, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                    </StackPanel>
                </StatusBarItem>
                <Separator Style="{DynamicResource SeparatorStyle}"/>
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Avg5LastText, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                        <TextBlock Text="{Binding Avg5Last, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                    </StackPanel>
                </StatusBarItem>
                <Separator Style="{DynamicResource SeparatorStyle}"/>
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding AvgAllText, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                        <TextBlock Text="{Binding AvgAll, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                    </StackPanel>
                </StatusBarItem>
                <Separator Style="{DynamicResource SeparatorStyle}"/>
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding AvgText, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBox
                                 Text="{Binding AvgAnyTextBox, UpdateSourceTrigger=PropertyChanged}" 
                                 Width="30" Margin="5 0 5 0"
                                 ></TextBox>
                        <TextBlock Text="{Binding AvgLastWordText, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock Text="{Binding AvgAny, UpdateSourceTrigger=PropertyChanged}"/>
                    </StackPanel>
                </StatusBarItem>
                <Separator Style="{DynamicResource SeparatorStyle}"/>
                <StatusBarItem>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding AvgText, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock Text="{Binding AvgAnySelectedText, UpdateSourceTrigger=PropertyChanged}" 
                                  Margin="5 0 5 0"
                                 ></TextBlock>
                        <TextBlock Text="{Binding AvgAnySelected, UpdateSourceTrigger=PropertyChanged}"/>
                    </StackPanel>
                </StatusBarItem>
                <Separator Style="{DynamicResource SeparatorLastStyle}"/>
            </StatusBar>
            <DockPanel LastChildFill="True">
                <DockPanel Grid.Row="0" DockPanel.Dock="Top" LastChildFill="True">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock 
                                   Text="{Binding ScrambleText, UpdateSourceTrigger=PropertyChanged}" 
                                   TextWrapping="Wrap" 
                                   DockPanel.Dock="Left" 
                                   FontSize="17" 
                                   Width="467" 
                                   Padding="10">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="SizeChanged">
                                    <b:InvokeCommandAction Command="{Binding SizeTextScrambleChangedCommand}" PassEventArgsToCommand="True"></b:InvokeCommandAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </TextBlock>
                        <Button Command="{Binding EditScrambleCommand}" 
                                Style="{DynamicResource ButtonPencilStyle}">
                            <fa5:SvgAwesome Icon="Solid_PencilAlt" Height="20" Width="20"
                                            Style="{DynamicResource IconsStyle}"/>
                        </Button>
                    </StackPanel>
                    <StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="10 0 0 0" HorizontalAlignment="Right">
                            <Button Command="{Binding NewScrambleCommand}" Content="{Binding NewScrambleText, UpdateSourceTrigger=PropertyChanged}" 
                                Style="{DynamicResource ButtonStyle}" Padding="10 5 10 5"/>
                            <Button Content="{Binding UnfoldText, UpdateSourceTrigger=PropertyChanged}" 
                                Command="{Binding UnfoldGridCommand}" Style="{DynamicResource ButtonStyle}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="10 0 0 0" HorizontalAlignment="Right">
                            <TextBlock HorizontalAlignment="Center" Width="200" TextAlignment="Left"
                                    Visibility="{Binding StopWatchVisibility, UpdateSourceTrigger=PropertyChanged}" 
                                    Text="{Binding StopWatchText, UpdateSourceTrigger=PropertyChanged}" 
                                    Foreground="{Binding StopWatchForeground, UpdateSourceTrigger=PropertyChanged}" 
                                    FontSize="40" FontWeight="SemiBold"/>
                            <CheckBox 
                                    Style="{DynamicResource CheckBoxStyle}" Focusable="False" 
                                    IsChecked="{Binding ShowStopWatchCheckBox, UpdateSourceTrigger=PropertyChanged}" 
                                    IsThreeState="False" 
                                    Content="{Binding ShowTimeText, UpdateSourceTrigger=PropertyChanged}" 
                                    VerticalAlignment="Center" Margin="5 0 30 0"/>
                        </StackPanel>
                    </StackPanel>
                </DockPanel>
                <StackPanel Grid.Row="1">
                    <StackPanel.Resources>
                        <m:SolutionTimeComparer x:Key="SolutionTimeComparer"/>
                    </StackPanel.Resources>
                    <m:CustomDataGrid
                        ItemsSource="{Binding CurrentPuzzleListListCollectionView, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding CurrentSolutionGrid, UpdateSourceTrigger=PropertyChanged}" 
                        SelectedItemsList="{Binding GridSelectedList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        CanUserDeleteRows="False" IsReadOnly="True" 
                        CanUserAddRows="False" Margin="30 10 30 10" 
                        ColumnWidth="*" AutoGenerateColumns="False"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                        ScrollViewer.VerticalScrollBarVisibility="Auto"
                        ScrollViewer.CanContentScroll="True" 
                        Style="{DynamicResource DataGridStyle}" MaxHeight="300"
                        m:CustomSortBehaviour.AllowCustomSort="True" 
                        Visibility="{Binding GridVisibility, UpdateSourceTrigger=PropertyChanged}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="KeyUp">
                                <b:InvokeCommandAction Command="{Binding GridDeleteKeyUpCommand}" PassEventArgsToCommand="True"></b:InvokeCommandAction>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <DataGrid.Resources>
                            <m:BindingProxy x:Key="Proxy" Data="{Binding}" />
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{Binding Data.GridHeaderIdText, Source={StaticResource Proxy}}" 
                                            Binding="{Binding Id}"/>
                            <DataGridTextColumn Header="{Binding Data.GridHeaderPuzzleNameText, Source={StaticResource Proxy}}" 
                                            Binding="{Binding PuzzleName}"/>
                            <DataGridTextColumn Header="{Binding Data.GridHeaderSolutionTimeText, Source={StaticResource Proxy}}" 
                                            Binding="{Binding SolutionTime}" 
                                            m:CustomSortBehaviour.CustomSorter="{Binding SolutionTimeComparer}"/>
                            <DataGridTextColumn Header="{Binding Data.GridHeaderSolutionDateText, Source={StaticResource Proxy}}" 
                                            Binding="{Binding SolutionDate}"/>
                            <DataGridTextColumn Header="{Binding Data.GridHeaderScrambleText, Source={StaticResource Proxy}}" 
                                            Binding="{Binding Scramble}"/>
                        </DataGrid.Columns>
                        <DataGrid.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding UpdateItemCommand}"></MouseBinding>
                        </DataGrid.InputBindings>
                    </m:CustomDataGrid>
                    <StackPanel>
                        <StackPanel Visibility="{Binding UnfoldsVisibility[0], UpdateSourceTrigger=PropertyChanged}">
                            <local:NByNCubeView Background="Transparent" 
                                Width="{Binding ControlWidth, UpdateSourceTrigger=PropertyChanged}"
                                Height="{Binding ControlHeight, UpdateSourceTrigger=PropertyChanged}"
                                DataContext="{Binding NByNCubeViewModelProperty, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <StackPanel HorizontalAlignment="Center" Visibility="{Binding UnfoldsVisibility[1], UpdateSourceTrigger=PropertyChanged}">
                            <local:SkewbView HorizontalAlignment="Center"
                                             Background="Transparent"
                                Width="{Binding ControlWidth, UpdateSourceTrigger=PropertyChanged}"
                                Height="{Binding ControlHeight, UpdateSourceTrigger=PropertyChanged}"
                                DataContext="{Binding SkewbViewModelProperty, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <StackPanel Visibility="{Binding UnfoldsVisibility[2], UpdateSourceTrigger=PropertyChanged}">
                            <local:PyraminxView Background="Transparent"
                                Width="{Binding ControlWidth, UpdateSourceTrigger=PropertyChanged}"
                                Height="{Binding ControlHeight, UpdateSourceTrigger=PropertyChanged}"
                                DataContext="{Binding PyraminxViewModelProperty, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <StackPanel Visibility="{Binding UnfoldsVisibility[3], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <local:MegaminxView Background="Transparent"
                                Width="{Binding ControlWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                Height="{Binding ControlHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                DataContext="{Binding MegaminxViewModelProperty, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            </local:MegaminxView>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </DockPanel>
        </DockPanel>
    </Grid>
</UserControl>
